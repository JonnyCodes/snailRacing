{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,E,E,O,C,mB,I,G,E,E,O,C,Q,I,G,E,E,O,C,iB,I,G,E,E,O,C,iB,I,G,E,E,O,C,gB,I,GCKO,IAAM,EAAmB,CAAC,EAAa,IACnC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAM,CAAA,EAAO,GAGvC,EAAqB,CAAC,EAAa,IACrC,KAAK,MAAM,GAAM,CAAA,EAAM,CAAA,EAAO,EAW5B,EAAQ,CAAC,EAAa,EAAa,IACrC,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,EAAK,KAAK,GAAG,CAAC,EAAK,IAAO,KAAK,GAAG,CAAC,EAAK,IAGxD,EAAiB,AAAC,GAC3B,AAAI,AAAe,UAAf,OAAO,EACA,EAGP,AAAoB,UAApB,OAAO,GAAK,KAAoB,AAAoB,UAApB,OAAO,GAAK,IACrC,EAAmB,EAAI,GAAG,CAAE,EAAI,GAAG,EAIvC,EAGE,EAAiB,IACnB,IAAM,AAAC,CAAA,AAAiB,SAAjB,KAAM,MAAM,IAAkB,CAAA,EAAG,QAAQ,CAAC,IAAI,QAAQ,CAAC,EAAG,KAG/D,EAAgB,IAClB,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,KAAK,CAAC,E,G,I,E,E,S,E,E,SCiE5C,AAvG0B,CAAA,MAAO,IAC7B,IAAM,EAAU,IAAI,EAAA,WAAU,CACxB,EAAkB,EAAE,CAEpB,EAAe,CACjB,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,IAAI,CAAC,CAAE,MAAO,SAAU,IAAK,cAAe,GACtD,CAED,CAAC,CAAY,CAAC,EAAE,CAAE,CAAY,CAAC,EAAE,CAAE,CAAY,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC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","sources":["<anon>","src/utils.ts","src/pages/finished.tsx"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4cf8\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4cf8\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"mDWTX\", function(module, exports) {\n\n$parcel$export(module.exports, \"randomIntBetween\", () => $df5bef30413a053b$export$7bddc4d01a7cbd18);\n$parcel$export(module.exports, \"clamp\", () => $df5bef30413a053b$export$7d15b64cf5a3a4c4);\n$parcel$export(module.exports, \"getConfigValue\", () => $df5bef30413a053b$export$81dc98ed13b87921);\n$parcel$export(module.exports, \"randomHexColor\", () => $df5bef30413a053b$export$18aa409469ae6764);\n$parcel$export(module.exports, \"getRandomSeed\", () => $df5bef30413a053b$export$b0968e9b35ccb868);\nconst $df5bef30413a053b$export$7bddc4d01a7cbd18 = (min, max)=>{\n    return Math.floor(Math.random() * (max - min) + min);\n};\nconst $df5bef30413a053b$export$3fd68433dc33f3f9 = (min, max)=>{\n    return Math.random() * (max - min) + min;\n};\nconst $df5bef30413a053b$export$b3b584c8d6ffe165 = ()=>{\n    return Math.random() >= 0.5;\n};\nconst $df5bef30413a053b$export$5082664ed3e64ee8 = (pointA, pointB)=>{\n    return Math.sqrt(Math.pow(pointB.x - pointA.x, 2) + Math.pow(pointB.y - pointA.y, 2));\n};\nconst $df5bef30413a053b$export$7d15b64cf5a3a4c4 = (val, min, max)=>{\n    return Math.max(Math.min(val, Math.max(min, max)), Math.min(min, max));\n};\nconst $df5bef30413a053b$export$81dc98ed13b87921 = (val)=>{\n    if (typeof val === \"number\") return val;\n    if (typeof val?.min === \"number\" && typeof val?.max === \"number\") return $df5bef30413a053b$export$3fd68433dc33f3f9(val.min, val.max);\n    // Final option\n    return 0;\n};\nconst $df5bef30413a053b$export$18aa409469ae6764 = ()=>{\n    return \"#\" + (Math.random() * 0xffffff << 0).toString(16).padStart(6, \"0\");\n};\nconst $df5bef30413a053b$export$b0968e9b35ccb868 = ()=>{\n    return Math.random().toString(36).slice(2);\n};\n\n});\n\n// types\n\nvar $iuB9z = parcelRequire(\"iuB9z\");\n\nvar $84MTf = parcelRequire(\"84MTf\");\nconst $7498f3248e8c0aac$var$renderFinalScreen = async (snailsConfig)=>{\n    const pixiApp = new (0, $iuB9z.Application)();\n    const snails = [];\n    const loadPromises = [\n        (0, $iuB9z.Assets).load({\n            alias: \"podium\",\n            src: \"./podium.png\"\n        })\n    ];\n    [\n        snailsConfig[0],\n        snailsConfig[1],\n        snailsConfig[2]\n    ].forEach((snailConfig)=>{\n        const snail = new (0, $84MTf.Snail)(snailConfig);\n        snails.push(snail);\n        loadPromises.push(snail.load(snailConfig.bodyAssetNum));\n    });\n    Promise.all(loadPromises).then(()=>{\n        pixiApp.init({\n            resizeTo: window,\n            backgroundColor: 0xb7e7fa,\n            sharedTicker: true\n        }).then(()=>{\n            document.getElementById(\"canvas\").appendChild(pixiApp.canvas);\n            $7498f3248e8c0aac$var$renderPodium(pixiApp.canvas, pixiApp.stage, snails);\n            $7498f3248e8c0aac$var$renderWinnersList(pixiApp.canvas, pixiApp.stage, snailsConfig);\n        });\n    });\n};\nfunction $7498f3248e8c0aac$var$renderPodium(canvas, stage, snails) {\n    const podium = (0, $iuB9z.Sprite).from(\"podium\");\n    podium.scale.set(0.15);\n    podium.anchor.set(0.5);\n    podium.position.set(canvas.width / 4, canvas.height / 2);\n    stage.addChild(podium);\n    const snail1 = snails[0].create();\n    snail1.position.set(podium.x - snail1.width / 2, podium.y - 370);\n    stage.addChild(snail1);\n    const snail2 = snails[1].create();\n    snail2.position.set(podium.x - 225 - snail2.width / 2, podium.y - 270);\n    stage.addChild(snail2);\n    const snail3 = snails[2].create();\n    snail3.position.set(podium.x + 225 - snail3.width / 2, podium.y - 235);\n    stage.addChild(snail3);\n}\nfunction $7498f3248e8c0aac$var$renderWinnersList(canvas, stage, snailsConfig) {\n    snailsConfig.forEach((snailConfig, i)=>{\n        const rectWidth = canvas.width / 3;\n        const rectHeight = 70;\n        const rectPos = new (0, $iuB9z.Point)(canvas.width / 3 * 2 - 100, i * (rectHeight + 10) + 100);\n        const backRect = new (0, $iuB9z.Graphics)();\n        backRect.rect(rectPos.x, rectPos.y, rectWidth, rectHeight);\n        switch(i){\n            case 0:\n                backRect.fill(0xC9B037);\n                break;\n            case 1:\n                backRect.fill(0xB4B4B4);\n                break;\n            case 2:\n                backRect.fill(0xAD8A56);\n                break;\n            default:\n                backRect.fill(0x555555);\n                break;\n        }\n        stage.addChild(backRect);\n        const nameAndPos = new (0, $iuB9z.Text)({\n            text: `${i + 1}: ${snailConfig.name}`,\n            style: {\n                fontSize: 35,\n                fill: i >= 3 ? 0xffffff : 0x000000\n            }\n        });\n        nameAndPos.position.set(rectPos.x + 20, rectPos.y + (rectHeight - nameAndPos.height) / 2);\n        stage.addChild(nameAndPos);\n        const time = new (0, $iuB9z.Text)({\n            text: (snailConfig.time / 1000).toFixed(3),\n            style: {\n                fontSize: 35,\n                fill: i >= 3 ? 0xffffff : 0x000000\n            }\n        });\n        time.position.set(rectPos.x + (rectWidth - (time.width + 20)), rectPos.y + (rectHeight - time.height) / 2);\n        stage.addChild(time);\n    });\n}\nconst $7498f3248e8c0aac$var$urlParams = new URLSearchParams(window.location.search);\nconst $7498f3248e8c0aac$var$snails = $7498f3248e8c0aac$var$urlParams.get(\"snails\");\nconst $7498f3248e8c0aac$var$snailsWithTime = JSON.parse($7498f3248e8c0aac$var$snails);\n$7498f3248e8c0aac$var$renderFinalScreen($7498f3248e8c0aac$var$snailsWithTime);\n\n\n//# sourceMappingURL=finished.aff4ca5f.js.map\n","import { Point } from \"pixi.js\";\n\n// types\nimport { Range } from \"types/backgroundConfig\";\n\nexport const randomIntBetween = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min) + min);\n};\n\nexport const randomFloatBetween = (min: number, max: number) => {\n    return Math.random() * (max - min) + min;\n};\n\nexport const randomBool = () => {\n    return Math.random() >= 0.5;\n};\n\nexport const distanceBetween = (pointA: Point, pointB: Point) => {\n    return Math.sqrt(Math.pow(pointB.x - pointA.x, 2) + Math.pow(pointB.y - pointA.y, 2));\n};\n\nexport const clamp = (val: number, min: number, max: number) => {\n    return Math.max(Math.min(val, Math.max(min, max)), Math.min(min, max));\n};\n\nexport const getConfigValue = (val?: number | Range): number => {\n    if (typeof val === \"number\") {\n        return val;\n    }\n    \n    if (typeof val?.min === \"number\" && typeof val?.max === \"number\") {\n        return randomFloatBetween(val.min, val.max);\n    }\n    \n    // Final option\n    return 0;\n};\n\nexport const randomHexColor = () => {\n    return \"#\" + ((Math.random() * 0xffffff) << 0).toString(16).padStart(6, \"0\");\n};\n\nexport const getRandomSeed = () => {\n    return Math.random().toString(36).slice(2);\n};\n","// types\nimport { ISnailWithTime } from \"types/snail\";\nimport { Application, Assets, Container, Graphics, Point, Sprite, Text } from \"pixi.js\";\nimport { Snail } from \"../snail\";\n\nconst renderFinalScreen = async (snailsConfig: ISnailWithTime[]) => {\n    const pixiApp = new Application();\n    const snails: Snail[] = [];\n\n    const loadPromises = [\n        Assets.load({ alias: \"podium\", src: \"./podium.png\" })\n    ];\n\n    [snailsConfig[0], snailsConfig[1], snailsConfig[2]].forEach((snailConfig) => {\n        const snail = new Snail(snailConfig);\n        snails.push(snail);\n        loadPromises.push(snail.load(snailConfig.bodyAssetNum));\n    });\n\n    Promise.all(loadPromises).then(() => {\n        pixiApp\n            .init({\n                resizeTo: window,\n                backgroundColor: 0xb7e7fa,\n                sharedTicker: true,\n            })\n            .then(() => {\n                document.getElementById(\"canvas\")!.appendChild(pixiApp.canvas);\n                renderPodium(pixiApp.canvas, pixiApp.stage, snails);\n                renderWinnersList(pixiApp.canvas, pixiApp.stage, snailsConfig);\n            })\n    });\n}\n\nfunction renderPodium(canvas: HTMLCanvasElement, stage: Container, snails: Snail[]) {\n    const podium = Sprite.from(\"podium\");\n    podium.scale.set(0.15);\n    podium.anchor.set(0.5);\n    podium.position.set(canvas.width / 4, canvas.height / 2);\n    stage.addChild(podium);\n\n    const snail1 = snails[0].create();\n    snail1.position.set(podium.x - snail1.width / 2, podium.y - 370);\n    stage.addChild(snail1);\n\n    const snail2 = snails[1].create();\n    snail2.position.set(podium.x - 225 - snail2.width / 2, podium.y - 270);\n    stage.addChild(snail2);\n\n    const snail3 = snails[2].create();\n    snail3.position.set(podium.x + 225 - snail3.width / 2, podium.y - 235);\n    stage.addChild(snail3);\n}\n\nfunction renderWinnersList(canvas: HTMLCanvasElement, stage: Container, snailsConfig: ISnailWithTime[]) {\n    snailsConfig.forEach((snailConfig, i) => {\n        const rectWidth = canvas.width / 3;\n        const rectHeight = 70;\n        const rectPos = new Point((canvas.width / 3) * 2 - 100, (i * (rectHeight + 10)) + 100);\n        const backRect = new Graphics();\n        backRect.rect(rectPos.x, rectPos.y, rectWidth, rectHeight);\n        switch(i) {\n            case 0: {\n                backRect.fill(0xC9B037);\n                break;\n            }\n            case 1: {\n                backRect.fill(0xB4B4B4);\n                break;\n            }\n            case 2: {\n                backRect.fill(0xAD8A56);\n                break;\n            }\n\n            default: {\n                backRect.fill(0x555555);\n                break;\n            }\n        }\n        stage.addChild(backRect);\n\n        const nameAndPos = new Text({ \n            text: `${i + 1}: ${snailConfig.name}`,\n            style: {\n                fontSize: 35,\n                fill: i >= 3 ? 0xffffff : 0x000000,\n            }\n        });\n        nameAndPos.position.set(rectPos.x + 20, rectPos.y + (rectHeight - nameAndPos.height) / 2);\n        stage.addChild(nameAndPos);\n\n        const time = new Text({ \n            text: (snailConfig.time / 1000).toFixed(3),\n            style: {\n                fontSize: 35,\n                fill: i >= 3 ? 0xffffff : 0x000000,\n            }\n        });\n        time.position.set(rectPos.x + (rectWidth - (time.width + 20)), rectPos.y + (rectHeight - time.height) / 2);\n        stage.addChild(time);\n    })\n    \n}\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst snails = urlParams.get(\"snails\");\nconst snailsWithTime: ISnailWithTime[] = JSON.parse(snails!);\nrenderFinalScreen(snailsWithTime);"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$df5bef30413a053b$export$7bddc4d01a7cbd18","$df5bef30413a053b$export$7d15b64cf5a3a4c4","$df5bef30413a053b$export$81dc98ed13b87921","$df5bef30413a053b$export$18aa409469ae6764","$df5bef30413a053b$export$b0968e9b35ccb868","min","max","Math","floor","random","$df5bef30413a053b$export$3fd68433dc33f3f9","val","toString","padStart","slice","$iuB9z","$84MTf","$7498f3248e8c0aac$var$renderFinalScreen","snailsConfig","pixiApp","Application","snails","loadPromises","Assets","load","alias","src","forEach","snailConfig","snail","Snail","push","bodyAssetNum","Promise","all","then","resizeTo","window","backgroundColor","sharedTicker","document","getElementById","appendChild","canvas","$7498f3248e8c0aac$var$renderPodium","stage","podium","Sprite","from","scale","anchor","position","width","height","addChild","snail1","create","x","y","snail2","snail3","$7498f3248e8c0aac$var$renderWinnersList","i","rectWidth","rectPos","Point","rectHeight","backRect","Graphics","rect","fill","nameAndPos","Text","text","name","style","fontSize","time","toFixed","JSON","parse","$7498f3248e8c0aac$var$urlParams","URLSearchParams","location","search"],"version":3,"file":"finished.aff4ca5f.js.map"}